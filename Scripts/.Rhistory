runApp('Documentos/CrisPRAL/app_v6.R')
runApp('Documentos/CrisPRAL/app_v6.R')
runApp('Documentos/CrisPRAL')
runApp('Documentos/CrisPRAL/app_v6.R')
runApp('Documentos/CrisPRAL/app_v6.R')
runApp('Documentos/CrisPRAL')
runApp('Documentos/CrisPRAL/app_v6,5.R')
runApp('Documentos/CrisPRAL/app_v6,5.R')
runApp('Documentos/CrisPRAL/app_v6,5.R')
input$input_type
isolate(input$input_type)
isolate(input$input_type)
isolate(input$input_type)
input$input_type
input$input_type
input$input_type == 'TRUE'
isolate(input$input_type)
runApp('Documentos/CrisPRAL/app_v6,5.R')
writeXStringSet('ACGT', getwd())
write_lines('ACGT',getwd())
install.packages('rJava')
library(rJava)
require(xlsx)
require(xlsx2)
shiny::runApp('Documentos/Lazy Filter Project')
runApp('Documentos/Lazy Filter Project')
shiny::runApp('Documentos/Lazy Filter Project')
runApp('Documentos/Lazy Filter Project')
runApp('Documentos/Lazy Filter Project')
runApp('Documentos/Lazy Filter Project')
DataTables$FilteredDT[input$Fil_file_rows_selected,1]
nchar(DataTables$FilteredDT[input$Fil_file_rows_selected,1])
nchar(as.character(DataTables$FilteredDT[input$Fil_file_rows_selected,1]))
runApp()
runApp('Documentos/Lazy Filter Project')
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v10.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_opt_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
state = "uploaded"
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
Target_FileInput()
isolate(Target_FileInput())
print(Target_FileInput())
is.null(Target_FileInput())
is.null(isolate(Target_FileInput()))
!is.null(isolate(Target_FileInput()))
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
Target_FileInput()
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
Target_FileInput()
isolate(Target_FileInput())
!is.null(Target_FileInput())
!is.null(isolate(Target_FileInput()))
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
Target_FileInput
Target_FileInput()
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_opt_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
isolate(Target_FileInput$FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
isolate(Target_FileInput())
runApp('Documentos/AllForOne/CrisPRAL/app_v10_removing_target.R')
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v13_alignments.R')
runApp('app_v13_alignments.R')
runApp('app_v13_alignments.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v13.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v13.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v13.R')
datos$Pie_data
length(datos$Pie_data)
nrows(datos$Pie_data)
nrow(datos$Pie_data)
c(1:nrow(datos$Pie_data))
Group <- c(1:nrow(datos$Pie_data))
Group
as.data.frame(Group)
for (i in Group){print(i)}
runApp('Documentos/AllForOne/CrisPRAL/app_v13.R')
Pie <- datos$Pie_data
globalenv(Pie)
Pie <<- datos$Pie_data
Pie
rep('Group',nrow(Pie))
Group <- c(1:nrow(Pie))
Pie %>% add_column(Group)
Group <- c(1:nrow(Pie)-1)
typeof(Group)
as.list(Group)
as.list(Group)[8] <- Other
as.list(Group)[8] <- 'Other'
Group_ls <- as.list(Group_ls))
Group_ls <- as.list(Group)
Group_ls[8]
Group_ls[7]
Group_ls[8] <- 'Other'
Group_ls
Pie %>% add_column(Group_ls)
Pie
Group_ls
Group_ls[8] <- ()
Group_ls[8] <-
[]
Group_ls[8] <- NULL
Group_ls[8]
Group_ls[7] <- 'Other'
Group_ls
Pie %>% add_column(Group_ls)
Pie2 <- Pie %>% add_column(Group_ls)
Pie2['Freq']
Pie2['Group_ls']
Pie2['Group_ls'][2]
unlist(Pie2['Group_ls'])
Group_ls
unlist(Group_ls)
as.data.frame(Group_ls)
Group <- as.data.frame(Group_ls)
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v14.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14.R')
#To install Biostrings:
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
if (!requireNamespace("BiocManager")
)
{install.packages('BiocManager')}
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
input_filename()
input_filename_results()
input_filename_generic()
datos$Tabla
rows_selected()
charts$tmpFilePie
charts$tmpFileDS
datos$alignmentdir
library(bookdown)
install.packages('kableExtra')
install.packages("kableExtra")
library(kableExtra)
library(rmarkdown)
library(tidyverse)
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
datos$Tabla
Tabla <<- datos$Tabla
chartPie <<- charts$tmpFilePie
chartDS <<- charts$tmpFileDS
chartDL <<- charts$tmpFileDL
chartIS <<- charts$tmpFileIS
chartIL <<- charts$tmpFileIL
chartMF <<- charts$tmpFileMF
alignments <<- datos$alignmentdir
salection <<- 'default'
knit_with_parameters('~/Documentos/AllForOne/CrisPRAL/reports.Rmd')
nrow(Tabla)
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
datos$Tabla
ls_ClusterAln_Ref$tmp
datos$aln
start(pattern(datos$aln))
datos$aln[3]
datos$aln[2]
datos$aln[4]
datos$aln[5]
datos$aln[6]
datos$aln[1]
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
datos$aln
sort(datos$aln)
datos$Ref
datos$Target
datos$namedSequences
datos$namedSequences[6]
datos$namedSequences[,6]
datos$namedSequences[6,]
pairwiseAlignment(datos$namedSequences[6,], datos$Ref)
pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Ref)
subject(pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Ref))=
subject(pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Ref))
subject(pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Target))
pattern(pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Ref))
subject(pairwiseAlignment(datos$namedSequences[6,]$Sequence, datos$Ref))
datos$aln[6]
datos$aln[3]
subject(datos$aln[3])
patterb(datos$aln[3])
pattern(datos$aln[3])
datos$Ref
pattern(pairwiseAlignment(datos$Ref, datos$namedSequences[6,]$Sequence))
subject(pairwiseAlignment(datos$Ref, datos$namedSequences[6,]$Sequence))
pairwiseAlignment(datos$Ref, datos$namedSequences[6,]$Sequence)
pairwiseAlignment(datos$Ref, datos$namedSequences[6,]$Sequence)@pattern
pairwiseAlignment(datos$Ref, datos$namedSequences[6,]$Sequence)@subject
datos$namedSequences
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
datos$namedSequences
datos$namedSequences[6,]
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
datos$namedStringSet
datos$namedStringSet[6,]
datos$namedStringSet[6,]$Seq
datos$namedStringSet[6,]$seq
seq(datos$namedSequences)
seq(datos$namedStringSet)
seq(datos$namedStringSet[6,])
datos$namedSequences[6,]
datos$namedSequences[6,]$Sequence
datos$namedSequences[6,]$ID
runApp('app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
library(shiny); runApp('Documentos/AllForOne/CrisPRAL/app_v14_GroupFunciton.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v15.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v15.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v15.R')
runApp('Documentos/AllForOne/CrisPRAL/app_v15.R')
source('~/.active-rstudio-document', echo=TRUE)
runApp('Documentos/AllForOne/CrisPRAL/app_v15.R')
shiny::runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
source( approx)
source( app.R )
source( 'app.R' )
shiny::runApp('Documentos/AllForOne/CrisPRAL')
library(Biostrings)
?Biostrings
??Biostrings
Biostrings::readDNAMultipleAlignment( '/home/Descargas/muscle-I20181219-151435-0717-63732601-p2m.aln', format = 'clustal' )
getwd()
Biostrings::readDNAMultipleAlignment( '/home/bioinfo/Descargas/muscle-I20181219-151435-0717-63732601-p2m.aln', format = 'clustal' )
aln <- Biostrings::readDNAMultipleAlignment( '/home/bioinfo/Descargas/muscle-I20181219-151435-0717-63732601-p2m.aln', format = 'clustal' )
aln[1]
aln@pattern
?DNAMultipleAlignment
consensusString(aln)
rownames(aln)
aln
aln$aln
aln(aln)
names(aln)
aln[1,1]
as.data.frame(aln)
as.matrix(aln)
as.matrix(aln)[1,1]
as.matrix(aln)[1,2]
as.matrix(aln)[1,3]
as.matrix(aln)[2,3]
as.matrix(aln)[500,3]
as.matrix(aln)[500,500]
as.matrix(aln)[,1]
as.matrix(aln)[1,]
as.matrix(aln)[,1]
as.matrix(aln)[1,]
as.character(aln)
as.character(aln)[1]
as.character(aln)[2]
as.character(aln)[2,3]
list(as.character(aln))
list(as.character(aln))[1]
list(as.character(aln))[2]
as.character(aln)[1] == as.character(aln)[2]
as.character(aln)[1] == as.character(aln)[3]
length(as.character(aln))
aln_char = as.character(aln)
for (k in 1:length(aln_char)){
for (i in k:length(aln_char)){
if ( aln_char[k] == aln_char[i]  ){
print('TRUE')
}}}
print(n)
print(n)
#Checks whether any string is equal to another in a list.
n = 0
for (k in 1:length(aln_char)){
for (i in k:length(aln_char)){
if ( aln_char[k] == aln_char[i]  ){
n = n + 1
}
}
}
print(n)
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
aln_char[k] == aln_char[i]
aln_char[4] == aln_char[5]
k+1
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
length(aln_char)
5:500
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
500:500
aln_char[500]
1:(length(aln_char)-1)
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
source('~/Biosoft/commut_char_st_comp.R')
commut_char_st_comp(aln_char)
794/540
749-540
794-540
540/794
1-(540/794)
254/794
x <- ('ABCD', 'ABSBDB', 'AKSKDD', 'ABCD', 'AKSKDD', 'AUIDOPSP')
x <- c('ABCD', 'ABSBDB', 'AKSKDD', 'ABCD', 'AKSKDD', 'AUIDOPSP')
commut_char_st_comp(x)
x[1]
x[1] == x[4]
commut_char_st_comp(x)
commut_char_st_comp(x)
debugSource('~/Biosoft/commut_char_st_comp.R')
debugSource('~/Biosoft/commut_char_st_comp.R')
commut_char_st_comp(x)
commut_char_st_comp(x)
commut_char_st_comp(aln_char)
debugSource('~/Biosoft/commut_char_st_comp.R')
commut_char_st_comp(aln_char)
source('~/Biosoft/commut_char_st_comp.R')
commut_char_st_comp(x)
shiny::runApp('Documentos/AllForOne/CrisPRAL')
shiny::runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
citation(tydir)
citation(tidyr)
citation('tidyr')
man Biostrings
?Biostrings
library(Biostrings)
?Biostrings
library('Biostrings')
?Biostrings
??Biostrings
?pairwiseAlignment
shiny::runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
dir()
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
dir()
dir(..)
dir("..")
dir("..")
dir("../Lazy_Filter_Project/")
runApp()
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
DataTable$UnfilteredDF
pull(DataTable$UnfilteredDF, input$EditedDF_columns_selected[1])
pull(DataTable$UnfilteredDF, 1)
DataTable$EditedDF
DataTable$EditedDF <- read.csv("../Lazy_Filter_Project/Empty.csv",
header=TRUE,
sep = ',')
DataTable$EditedDF
DataTable$EditedDF %>% add_row(c(pull(DataTable$UnfilteredDF, 1),pull(DataTable$UnfilteredDF, 3),pull(DataTable$UnfilteredDF, 4)))
c(pull(DataTable$UnfilteredDF, 1),pull(DataTable$UnfilteredDF, 3),pull(DataTable$UnfilteredDF, 4))
pull(DataTable$UnfilteredDF, 3)
typeof(pull(DataTable$UnfilteredDF, 3))
DataTable$UnfilteredDF %>% select(1,3,4)
DataTable$UnfilteredDF %>% select(1,3,4)
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename(Gen = 1)
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename('Gen' = 1)
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename('Gen' = colnames(DataTable$UnfilteredDF[1]))
colnames(DataTable$UnfilteredDF)
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename('Gen' = colnames(DataTable$UnfilteredDF[1]), 'Gap_Start' = colnames(DataTable$UnfilteredDF[2]))
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename('Gen' = colnames(DataTable$UnfilteredDF[1]), 'Gap_Start' = colnames(DataTable$UnfilteredDF[3]))
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename('Identifier' = colnames(DataTable$UnfilteredDF[1]), 'Gap_Start' = colnames(DataTable$UnfilteredDF[3]))
DataTable$UnfilteredDF %>% select(1,3,4) %>% rename(colnames(DataTable$UnfilteredDF[1]) =  'Identifier', colnames(DataTable$UnfilteredDF[3]) = 'Gap_Start')
FloatingRows$spam = DataTable$UnfilteredDF %>% select(1,3,4)
colnames(FloatingRows$spam)
colnames(FloatingRows$spam) = c('Identifiers', 'Gap_Start', 'Gap_Stop')
colnames(FloatingRows$spam)
runApp()
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
output.show
values$show
show
input.show
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
DataTable$PrintingDF
DataTable$PrintingDF = right_join(DataTable$PrintingDF_reps, DataTable$PrintingDF,  by = "Gen") %>% distinct()
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
DataTable$PrintingDF
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
source('~/.active-rstudio-document')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
runApp('Documentos/AllForOne/CrisPRAL')
